require("dotenv").config();
let db = require("./database.js");
const TelegramBot = require("node-telegram-bot-api");
const debug = require("./helpers");
const keyboards = require("./keyboards");
const kb = require("./keyboard_buttons");
const request = require("request");
const neatCsv = require("neat-csv");

const TOKEN = process.env.TOKEN;


const bot = new TelegramBot(TOKEN, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 10
    }
  }
});

const covid_symptoms = {
  fever: "–ß–∞—Å—Ç–æ",
  cough: "–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞",
  weakness: "–ß–∞—Å—Ç–æ",
  shortness_of_breath: "–ú–æ–∂–µ—Ç –±—ã—Ç—å",
  headache: "–†–µ–¥–∫–æ",
  body_aches: "–†–µ–¥–∫–æ",
  sore_throat: "–†–µ–¥–∫–æ",
  chills: "–†–µ–¥–∫–æ",
  runny_nose: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç",
  sneezing: "–ù–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ"
};

const symptoms_number = Object.keys(covid_symptoms).length;

const cold_symptoms = {
  fever: "–†–µ–¥–∫–æ",
  cough: "–ò–Ω–æ–≥–¥–∞",
  weakness: "–ò–Ω–æ–≥–¥–∞",
  shortness_of_breath: "–ù–µ—Ç",
  headache: "–†–µ–¥–∫–æ",
  body_aches: "–ò–Ω–æ–≥–¥–∞",
  sore_throat: "–ß–∞—Å—Ç–æ",
  chills: "–†–µ–¥–∫–æ",
  runny_nose: "–ß–∞—Å—Ç–æ",
  sneezing: "–ß–∞—Å—Ç–æ"
};

const flu_symptoms = {
  fever: "–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ",
  cough: "–ß–∞—Å—Ç–æ, —Å—É—Ö–æ–π",
  weakness: "–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ",
  shortness_of_breath: "–ù–µ—Ç",
  headache: "–ß–∞—Å—Ç–æ",
  body_aches: "–ß–∞—Å—Ç–æ",
  sore_throat: "–ò–Ω–æ–≥–¥–∞",
  chills: "–ß–∞—Å—Ç–æ",
  runny_nose: "–ò–Ω–æ–≥–¥–∞",
  sneezing: "–ò–Ω–æ–≥–¥–∞"
};

console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");

const close_txt = "–ó–∞–∫—Ä—ã—Ç—å ‚ùå";
const option_txt = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è";
const validation_txt = "–Ø –º–æ–≥—É –±—ã—Ç—å –∑–∞—Ä–∞–∂–µ–Ω?ü§ß\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è";
const inform_txt = "–°–∏—Ç—É–∞—Ü–∏—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ";
const faq = "–•–æ—á—É —É–∑–Ω–∞—Ç—å –æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–µ";

bot.on("message", msg => {
  const chatId = msg.chat.id;

  const user_id = msg.from.id;
  const chat_id = msg.chat.id;
  let { first_name, username } = msg.from;
  const date = msg.date;
  let userRef = db.collection("user_info").doc(String(user_id));
  let news_notification;
  let pharmacy_notification;

  switch (msg.text) {
    case "/start":
      bot.sendMessage(
        chatId,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞–≤–∞—Ç—å –≤—Å—é –∞–∫—Ç—É–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ COVID-19\n–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã.",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                  callback_data: "menu_open"
                }
              ]
            ]
          }
        }
      );

      if (username === undefined) {
        username = null;
      }

      // bot.sendMessage(chatId, debug(msg));

      userRef
        .get()
        .then(snapshot => {
          if (!snapshot.exists) {
            userRef
              .set({
                user_id: user_id,
                chat_id: chat_id,
                first_name: first_name,
                username: username,
                date: new Date(date),
                news_notification: true,
                pharmacy_notification: true,
                corona_test: {
                  fever: null,
                  cough: null,
                  weakness: null,
                  shortness_of_breath: null,
                  headache: null,
                  body_aches: null,
                  sore_throat: null,
                  chills: null,
                  runny_nose: null,
                  sneezing: null
                }
              })
              .then(() => {
                console.log("User successfully added!");
              });
          } else {
            console.log("Already in database");
          }
        })
        .catch(err => {
          console.error(err);
        });
      break;
    case close_txt:
      bot.sendMessage(chatId, "–ó–∞–∫—Ä—ã—Ç–æ", {
        reply_markup: {
          remove_keyboard: true
        }
      });
      break;
    case "/test":
    case validation_txt:
      bot.sendMessage(
        chatId,
        '–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∞–º–∏, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–∏–∂–µ\n–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –æ—Ç–≤–µ—á–∞–π—Ç–µ "–ù–µ—Ç"\n–£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—Ö–æ—Ä–∞–¥–∫–∞?',
        {
          reply_markup: {
            inline_keyboard: keyboards.q1A
          }
        }
      );
      break;
    case "/options":
    case option_txt:
      // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É —Å –¥–± –æ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö
      // –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
      try {
        updateNotification(user_id).then(result => {
          news_notification = result.news_notification;
          pharmacy_notification = result.pharmacy_notification;
          let news_notification_option = [];
          let pharmacy_notification_option = [];

          // console.log(news_notification);
          // console.log(pharmacy_notification);

          if (news_notification) {
            news_notification_option = [
              {
                text: "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
                callback_data: "news_notification_false"
              }
            ];
          } else {
            news_notification_option = [
              {
                text: "–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
                callback_data: "news_notification_true"
              }
            ];
          }

          if (pharmacy_notification) {
            pharmacy_notification_option = [
              {
                text: "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
                callback_data: "pharmacy_notification_false"
              }
            ];
          } else {
            pharmacy_notification_option = [
              {
                text: "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
                callback_data: "pharmacy_notification_true"
              }
            ];
          }
          bot.sendMessage(chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", {
            reply_markup: {
              inline_keyboard: [
                news_notification_option,
                pharmacy_notification_option,
                [
                  {
                    text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                    callback_data: "menu_open"
                  }
                ]
              ]
            }
          });
        });
      } catch (err) {
        console.log(err);
      }

      break;

    case "/information":
    case inform_txt:
      bot.sendMessage(chatId, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ",
                callback_data: "covid_count_info"
              }
            ],
            [
              {
                text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                callback_data: "menu_open"
              }
            ]
          ]
        }
      });
      break;
    case kb.questions.back:
    case faq:
      bot.sendMessage(chatId, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", {
        reply_markup: {
          keyboard: keyboards.faq1
        }
      });
      break;
    case "–ú–µ–Ω—é":
    case "/menu":
      bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
        reply_markup: {
          keyboard: [
            [validation_txt],
            [option_txt],
            [inform_txt],
            [faq],
            [close_txt]
          ],
          one_time_keyboard: true
        }
      });
      break;
    case kb.questions.next:
      bot.sendMessage(chatId, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", {
        reply_markup: {
          keyboard: keyboards.faq2
        }
      });
      break;
    case kb.questions.what_is_corona:
      text = kb.replies.what_is_corona;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      break;
    case kb.questions.what_is_cov:
      text = kb.replies.what_is_cov;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      break;
    case kb.questions.what_symptoms:
      text = kb.replies.what_symptoms;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      break;
    case kb.questions.how_virus:
      text = kb.replies.how_virus;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      break;
    case kb.questions.air_virus:
      text = kb.replies.air_virus;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      break;
    case kb.questions.no_symptoms_man:
      text = kb.replies.no_symptoms_man;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      break;
    case kb.questions.shit_man:
      text = kb.replies.shit_man;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      break;
    case kb.questions.how_to_defend:
      text = kb.replies.how_to_defend;
      bot.sendMessage(chatId, text, {
        parse_mode: "HTML"
      });
      bot.sendMessage(
        chatId,
        "–°–æ–±–ª—é–¥–∞—è –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è COVID‚Äë19:<strong>–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Ä—É–∫–∏ —Å–ø–∏—Ä—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∏–ª–∏ –º–æ–π—Ç–µ –∏—Ö —Å –º—ã–ª–æ–º.</strong>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –ï—Å–ª–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ä—É–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∏—Ä—É—Å, —Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–∫ —Å–ø–∏—Ä—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∏–ª–∏ –º—ã—Ç—å–µ –∏—Ö —Å –º—ã–ª–æ–º —É–±—å–µ—Ç –µ–≥–æ.<strong>–î–µ—Ä–∂–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ –º–µ–Ω–µ–µ –æ–¥–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ –æ—Ç –∫–∞—à–ª—è—é—â–∏—Ö –∏–ª–∏ —á–∏—Ö–∞—é—â–∏—Ö –ª—é–¥–µ–π.</strong>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –ü—Ä–∏ –∫–∞—à–ª–µ –∏–ª–∏ —á–∏—Ö–∞–Ω–∏–∏ –∏–∑ –Ω–æ—Å–∞ –∏–ª–∏ —Ä—Ç–∞ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –º–µ–ª—å—á–∞–π—à–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤–∏—Ä—É—Å –∫–∞–ø–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –≤–æ–∫—Ä—É–≥ —Å–µ–±—è. –ù–∞—Ö–æ–¥—è—Å—å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ç–∞–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ –≤–¥–æ—Ö–Ω—É—Ç—å —ç—Ç–∏ –∫–∞–ø–ª–∏ –∏ –∑–∞—Ä–∞–∑–∏—Ç—å—Å—è –æ—Ç –Ω–µ–≥–æ, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–µ–π, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –±–æ–ª–µ–Ω COVID-19.<strong>–ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ —Ä—É–∫–∞–º–∏ –≥–ª–∞–∑–∞, –Ω–æ—Å –∏ —Ä–æ—Ç.</strong>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –†—É–∫–∏ –∫–∞—Å–∞—é—Ç—Å—è –º–Ω–æ–≥–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, –∏ –Ω–∞ –Ω–∏—Ö –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤–∏—Ä—É—Å. –û–∫–∞–∑–∞–≤—à–∏—Å—å –Ω–∞ —Ä—É–∫–∞—Ö, –≤–∏—Ä—É—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –º–æ–≥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å –≤ –≥–ª–∞–∑–∞, –Ω–æ—Å –∏–ª–∏ —Ä–æ—Ç. –° —ç—Ç–∏—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ –≤–∏—Ä—É—Å –º–æ–∂–µ—Ç –≤–Ω–µ–¥—Ä—è—Ç—å—Å—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–º –∏ –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ.<strong>–ö–∞–∫ –≤–∞–º, —Ç–∞–∫ –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–º —Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–π –≥–∏–≥–∏–µ–Ω—ã.</strong>–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä—ã–≤–∞—Ç—å —Ä–æ—Ç –∏–ª–∏ –Ω–æ—Å —Å–≥–∏–±–æ–º –ª–æ–∫—Ç—è –∏–ª–∏ —Å–∞–ª—Ñ–µ—Ç–∫–æ–π –ø—Ä–∏ –∫–∞—à–ª–µ –∏–ª–∏ —á–∏—Ö–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Å–∞–ª—Ñ–µ—Ç–∫—É –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –∂–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å.–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –í–∏—Ä—É—Å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ–ª–∫–∏–µ –∫–∞–ø–ª–∏. –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–π –≥–∏–≥–∏–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—â–∏—Ç–∏—Ç—å –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –æ—Ç —Ç–∞–∫–∏—Ö –≤–∏—Ä—É—Å–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, –∫–∞–∫ –û–†–í–ò, –≥—Ä–∏–ø–ø –∏ COVID-19. <strong>–ï—Å–ª–∏ –≤—ã –ø–ª–æ—Ö–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –¥–æ–º–∞.</strong>–ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–∞—à–ª—è –∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–∏ –¥—ã—Ö–∞–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é. –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –º–µ—Å—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –£ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏ –º–µ—Å—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–µ—Ç—Å—è —Å–∞–º–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —Ä–∞–π–æ–Ω–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é –ø–æ–∑–≤–æ–ª–∏—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Å –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ª–µ—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã —Ç–µ–º —Å–∞–º—ã–º –æ–±–µ–∑–æ–ø–∞—Å–∏—Ç–µ —Å–µ–±—è –∏ –ø–æ–º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Ñ–µ–∫—Ü–∏–π. <strong>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –∑–æ–Ω –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –ø–æ COVID‚Äë19</strong>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –∑–æ–Ω –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –ø–æ COVID‚Äë19 (–≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–∞–π–æ–Ω—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–º–µ—á–µ–Ω–æ —à–∏—Ä–æ–∫–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ COVID‚Äë19). –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –ø–æ–µ–∑–¥–æ–∫, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∂–∏–ª—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –∏–ª–∏ —Å—Ç—Ä–∞–¥–∞–µ—Ç–µ –¥–∏–∞–±–µ—Ç–æ–º, –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ —Å–µ—Ä–¥—Ü–∞ –∏–ª–∏ –ª–µ–≥–∫–∏—Ö. –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ? –í —ç—Ç–∏—Ö —Ä–∞–π–æ–Ω–∞—Ö –≤—ã –ø–æ–¥–≤–µ—Ä–≥–Ω–µ—Ç–µ —Å–µ–±—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É –∑–∞—Ä–∞–∂–µ–Ω–∏—è COVID‚Äë19.",
        {
          parse_mode: "HTML"
        }
      );
      break;
  }
});

bot.on("callback_query", query => {
  const userId = query.from.id;
  const chatId = query.message.chat.id;
  // console.log(query);

  userRef = db.collection("user_info").doc(String(userId));

  switch (query.data) {
    case "menu_open":
      bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
        reply_markup: {
          keyboard: [
            [validation_txt],
            [option_txt],
            [inform_txt],
            [faq],
            [close_txt]
          ],
          one_time_keyboard: true
        }
      });
      break;
    case "covid_count_info":
      let types = ["Confirmed", "Deaths", "Recovered"];
      let confirmed_count, death_count, recovered_count;
      for (let type in types) {
        countOfCovidType(types[type], function(err, res) {
          if (err) {
            console.log(err);
          } else {
            if (res.type == "Confirmed") {
              confirmed_count = res.result;
            } else if (res.type == "Deaths") {
              death_count = res.result;
            } else {
              recovered_count = res.result;
            }
            if (
              confirmed_count !== undefined &&
              death_count !== undefined &&
              recovered_count !== undefined
            ) {
              bot.sendMessage(
                chatId,
                `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: ${confirmed_count}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö: ${recovered_count}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–∏–±—à–∏—Ö: ${death_count}`
              );
            }
          }
        });
      }
      break;
    case "news_notification_false":
      // set to false
      userRef
        .update({
          news_notification: false
        })
        .then(() => {
          console.log("News notification option updated to false");
          inline_keyboard_markup = {
            inline_keyboard: [
              [
                {
                  text: "–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
                  callback_data: "news_notification_true"
                }
              ],
              [
                {
                  text: query.message.reply_markup.inline_keyboard[1][0].text,
                  callback_data:
                    query.message.reply_markup.inline_keyboard[1][0]
                      .callback_data
                }
              ],
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                  callback_data: "menu_open"
                }
              ]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    case "pharmacy_notification_false":
      // set to false
      userRef
        .update({
          pharmacy_notification: false
        })
        .then(() => {
          console.log("Pharmacy notification option updated to false");
          inline_keyboard_markup = {
            inline_keyboard: [
              [
                {
                  text: query.message.reply_markup.inline_keyboard[0][0].text,
                  callback_data:
                    query.message.reply_markup.inline_keyboard[0][0]
                      .callback_data
                }
              ],
              [
                {
                  text: "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
                  callback_data: "pharmacy_notification_true"
                }
              ],
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                  callback_data: "menu_open"
                }
              ]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    case "news_notification_true":
      // set to true
      userRef
        .update({
          news_notification: true
        })
        .then(() => {
          console.log("News notification option updated to true");
          inline_keyboard_markup = {
            inline_keyboard: [
              [
                {
                  text: "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
                  callback_data: "news_notification_false"
                }
              ],
              [
                {
                  text: query.message.reply_markup.inline_keyboard[1][0].text,
                  callback_data:
                    query.message.reply_markup.inline_keyboard[1][0]
                      .callback_data
                }
              ],
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                  callback_data: "menu_open"
                }
              ]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    case "pharmacy_notification_true":
      // set to true
      userRef
        .update({
          pharmacy_notification: true
        })
        .then(() => {
          console.log("Pharmacy notification option updated to true");
          inline_keyboard_markup = {
            inline_keyboard: [
              [
                {
                  text: query.message.reply_markup.inline_keyboard[0][0].text,
                  callback_data:
                    query.message.reply_markup.inline_keyboard[0][0]
                      .callback_data
                }
              ],
              [
                {
                  text: "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
                  callback_data: "pharmacy_notification_false"
                }
              ],
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                  callback_data: "menu_open"
                }
              ]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    default:
      const { symptom, answer } = JSON.parse(query.data);
      // parse data into firebase
      switch (symptom) {
        case kb.symptoms.fever:
          userRef.set(
            {
              corona_test: {
                fever: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.cough, keyboards.q2A);
          break;
        case kb.symptoms.cough:
          userRef.set(
            {
              corona_test: {
                cough: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.weakness, keyboards.q3A);
          break;
        case kb.symptoms.weakness:
          userRef.set(
            {
              corona_test: {
                weakness: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.shortness_of_breath, keyboards.q4A);
          break;
        case kb.symptoms.shortness_of_breath:
          userRef.set(
            {
              corona_test: {
                shortness_of_breath: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.headache, keyboards.q5A);
          break;
        case kb.symptoms.headache:
          userRef.set(
            {
              corona_test: {
                headache: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.body_aches, keyboards.q6A);
          break;
        case kb.symptoms.body_aches:
          userRef.set(
            {
              corona_test: {
                body_aches: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.sore_throat, keyboards.q7A);
          break;
        case kb.symptoms.sore_throat:
          userRef.set(
            {
              corona_test: {
                sore_throat: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.chills, keyboards.q8A);
          break;
        case kb.symptoms.chills:
          userRef.set(
            {
              corona_test: {
                chills: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.runny_nose, keyboards.q9A);
          break;
        case kb.symptoms.runny_nose:
          userRef.set(
            {
              corona_test: {
                runny_nose: answer
              }
            },
            {
              merge: true
            }
          );
          sendQuestion(chatId, kb.symptoms.sneezing, keyboards.q10A);
          break;
        case kb.symptoms.sneezing:
          userRef.set(
            {
              corona_test: {
                sneezing: answer
              }
            },
            {
              merge: true
            }
          );

          let covid_score = 0;
          let cold_score = 0;
          let flu_score = 0;

          console.log(userId);
          userRef = db.collection("user_info").doc(String(userId));
          userRef.get().then(snapshot => {
            let test_results = snapshot.data().corona_test;
            for (let key in test_results) {
              if (covid_symptoms[key] == test_results[key]) {
                covid_score++;
              }
              if (cold_symptoms[key] == test_results[key]) {
                cold_score++;
              }
              if (flu_symptoms[key] == test_results[key]) {
                flu_score++;
              }
            }

            bot.sendMessage(
              chatId,
              `–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n–ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å: ${(covid_score *
                100) /
                symptoms_number}%\n–ü—Ä–æ—Å—Ç—É–¥–∞: ${(cold_score * 100) /
                symptoms_number}%\n–ì—Ä–∏–ø–ø: ${(flu_score * 100) /
                symptoms_number}%\n–í–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –º—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–∫–æ—Ä—É—é –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å!`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é",
                        callback_data: "menu_open"
                      }
                    ]
                  ]
                }
              }
            );
          });

          // end
          break;
        default:
          break;
      }
      break;
  }
});

async function updateNotification(user_id) {
  userRef = db.collection("user_info");
  let news_notification, pharmacy_notification;
  docSnapshot = await userRef.doc(String(user_id)).get();

  if (docSnapshot.exists) {
    news_notification = docSnapshot.data().news_notification;
    pharmacy_notification = docSnapshot.data().pharmacy_notification;
  }

  return {
    news_notification,
    pharmacy_notification
  };
}

function sendQuestion(chatId, symptom, question) {
  bot.sendMessage(chatId, `–£ –≤–∞—Å –µ—Å—Ç—å ${symptom}?`, {
    reply_markup: {
      inline_keyboard: question
    }
  });
}
function countOfCovidType(type, callback) {
  request(
    {
      url: `https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-${type}.csv`,
      method: "GET"
    },
    async (err, response, body) => {
      if (err) {
        console.error(err);
        console.log(response);
        return callback(err);
      } else {
        let result = await neatCsv(body);
        let index = result.find((elem, index, arr) => {
          if (elem["Country/Region"] == "Kazakhstan") {
            return index;
          }
        });

        if (index !== undefined) {
          let date = new Date();
          let yy = date.getFullYear() % 2000;
          let mm = date.getMonth() + 1;
          let dd = date.getDate();
          if (index[`${mm}/${dd}/${yy}`] !== undefined) {
            result = index[`${mm}/${dd}/${yy}`];
          } else {
            result = index[`${mm}/${dd - 1}/${yy}`];
          }
          // results.push_back(result_index);
          callback(null, { type: type, result: result });
        }
      }
    }
  );
}
