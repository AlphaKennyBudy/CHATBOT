require("dotenv").config();
let db = require("./database.js");
const TelegramBot = require("node-telegram-bot-api");
const debug = require("./helpers");
const keyboards = require("./keyboards");
const kb = require("./keyboard_buttons");

const TOKEN = process.env.TOKEN;

const bot = new TelegramBot(TOKEN, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 10
    }
  }
});

const covid_symptoms = {
  fever: "–ß–∞—Å—Ç–æ",
  cough: "–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞",
  weakness: "–ß–∞—Å—Ç–æ",
  shortness_of_breath: "–ú–æ–∂–µ—Ç –±—ã—Ç—å",
  headache: "–†–µ–¥–∫–æ",
  body_aches: "–†–µ–¥–∫–æ",
  sore_throat: "–†–µ–¥–∫–æ",
  chills: "–†–µ–¥–∫–æ",
  runny_nose: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç",
  sneezing: "–ù–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ"
};

const symptoms_number = Object.keys(covid_symptoms).length;

const cold_symptoms = {
  fever: "–†–µ–¥–∫–æ",
  cough: "–ò–Ω–æ–≥–¥–∞",
  weakness: "–ò–Ω–æ–≥–¥–∞",
  shortness_of_breath: "–ù–µ—Ç",
  headache: "–†–µ–¥–∫–æ",
  body_aches: "–ò–Ω–æ–≥–¥–∞",
  sore_throat: "–ß–∞—Å—Ç–æ",
  chills: "–†–µ–¥–∫–æ",
  runny_nose: "–ß–∞—Å—Ç–æ",
  sneezing: "–ß–∞—Å—Ç–æ"
};

const flu_symptoms = {
  fever: "–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ",
  cough: "–ß–∞—Å—Ç–æ, —Å—É—Ö–æ–π",
  weakness: "–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ",
  shortness_of_breath: "–ù–µ—Ç",
  headache: "–ß–∞—Å—Ç–æ",
  body_aches: "–ß–∞—Å—Ç–æ",
  sore_throat: "–ò–Ω–æ–≥–¥–∞",
  chills: "–ß–∞—Å—Ç–æ",
  runny_nose: "–ò–Ω–æ–≥–¥–∞",
  sneezing: "–ò–Ω–æ–≥–¥–∞"
};

console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");

bot.on("message", msg => {
  const chatId = msg.chat.id;

  const close_txt = "–ó–∞–∫—Ä—ã—Ç—å ‚ùå";
  const option_txt = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è";
  const validation_txt = "–Ø –º–æ–≥—É –±—ã—Ç—å –∑–∞—Ä–∞–∂–µ–Ω?ü§ß\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è";
  const inform_txt = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å";
  const faq = "–•–æ—á—É —É–∑–Ω–∞—Ç—å –æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–µ";

  const user_id = msg.from.id;
  const chat_id = msg.chat.id;
  let {
    first_name,
    username
  } = msg.from;
  const date = msg.date;
  let userRef = db.collection("user_info").doc(String(user_id));
  let news_notification;
  let pharmacy_notification;

  switch (msg.text) {
    case "/start":
      bot.sendMessage(
        chatId,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞–≤–∞—Ç—å –≤—Å—é –∞–∫—Ç—É–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ COVID-19\n–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã."
        // , {
        //   reply_markup: {
        //     inline_keyboard: [
        //       [{
        //         text: "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
        //         callback_data: "news_notification_false"
        //       }],
        //       [{
        //         text: "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
        //         callback_data: "pharmacy_notification_false"
        //       }]
        //     ]
        //   }
        // }
      );

      if (username === undefined) {
        username = null;
      }

      // bot.sendMessage(chatId, debug(msg));

      userRef
        .get()
        .then(snapshot => {
          if (!snapshot.exists) {
            userRef
              .set({
                user_id: user_id,
                chat_id: chat_id,
                first_name: first_name,
                username: username,
                date: new Date(date),
                news_notification: true,
                pharmacy_notification: true,
                corona_test: {
                  fever: null,
                  cough: null,
                  weakness: null,
                  shortness_of_breath: null,
                  headache: null,
                  body_aches: null,
                  sore_throat: null,
                  chills: null,
                  runny_nose: null,
                  sneezing: null
                }
              })
              .then(() => {
                console.log("User successfully added!");
              });
          } else {
            console.log("Already in database");
          }
        })
        .catch(err => {
          console.error(err);
        });
      break;
    case close_txt:
      bot.sendMessage(chatId, "–ó–∞–∫—Ä—ã—Ç–æ", {
        reply_markup: {
          remove_keyboard: true
        }
      });
      break;
    case "/test":
    case validation_txt:
      bot.sendMessage(
        chatId,
        '–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∞–º–∏, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–∏–∂–µ\n–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –æ—Ç–≤–µ—á–∞–π—Ç–µ "–ù–µ—Ç"\n–£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—Ö–æ—Ä–∞–¥–∫–∞?', {
          reply_markup: {
            inline_keyboard: keyboards.q1A
          }
        }
      );
      break;
    case "/options":
    case option_txt:
      // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É —Å –¥–± –æ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö
      // –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
      try {
        updateNotification(user_id).then(result => {
          news_notification = result.news_notification;
          pharmacy_notification = result.pharmacy_notification;
          let news_notification_option = [];
          let pharmacy_notification_option = [];

          // console.log(news_notification);
          // console.log(pharmacy_notification);

          if (news_notification) {
            news_notification_option = [{
              text: "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
              callback_data: "news_notification_false"
            }];
          } else {
            news_notification_option = [{
              text: "–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
              callback_data: "news_notification_true"
            }];
          }

          if (pharmacy_notification) {
            pharmacy_notification_option = [{
              text: "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
              callback_data: "pharmacy_notification_false"
            }];
          } else {
            pharmacy_notification_option = [{
              text: "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
              callback_data: "pharmacy_notification_true"
            }];
          }
          bot.sendMessage(chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", {
            reply_markup: {
              inline_keyboard: [
                news_notification_option,
                pharmacy_notification_option
              ]
            }
          });
        });
      } catch (err) {
        console.log(err);
      }

      break;

    case "/information":
    case inform_txt:
      bot.sendMessage(chatId, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", {
        reply_markup: {
          inline_keyboard: [
            [{
              text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ",
              callback_data: "covid_count_info"
            }]
          ]
        }
      });
      break;
    case faq:
      bot.sendMessage(chatId, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", {
        reply_markup: {
          keyboard: keyboards.faq
        }
      });
      break;
    case "/menu":
    default:
      bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
        reply_markup: {
          keyboard: [
            [validation_txt],
            [option_txt],
            [inform_txt],
            [faq],
            [close_txt]
          ],
          one_time_keyboard: true
        }
      });
  }
});

bot.on("callback_query", query => {
  const userId = query.from.id;
  const chatId = query.message.chat.id;
  // console.log(query);

  userRef = db.collection("user_info").doc(String(userId));

  switch (query.data) {
    case "covid_count_info":
      let confirmed = 9;
      let deaths = 0;
      let recovered = 0;
      bot.sendMessage(
        chatId,
        `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: ${confirmed}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö: ${recovered}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–∏–±—à–∏—Ö: ${deaths}`
      );
      break;
    case "news_notification_false":
      // set to false
      userRef
        .update({
          news_notification: false
        })
        .then(() => {
          console.log("News notification option updated to false");
          inline_keyboard_markup = {
            inline_keyboard: [
              [{
                text: "–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
                callback_data: "news_notification_true"
              }],
              [{
                text: query.message.reply_markup.inline_keyboard[1][0].text,
                callback_data: query.message.reply_markup.inline_keyboard[1][0]
                  .callback_data
              }]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    case "pharmacy_notification_false":
      // set to false
      userRef
        .update({
          pharmacy_notification: false
        })
        .then(() => {
          console.log("Pharmacy notification option updated to false");
          inline_keyboard_markup = {
            inline_keyboard: [
              [{
                text: query.message.reply_markup.inline_keyboard[0][0].text,
                callback_data: query.message.reply_markup.inline_keyboard[0][0]
                  .callback_data
              }],
              [{
                text: "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
                callback_data: "pharmacy_notification_true"
              }]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    case "news_notification_true":
      // set to true
      userRef
        .update({
          news_notification: true
        })
        .then(() => {
          console.log("News notification option updated to true");
          inline_keyboard_markup = {
            inline_keyboard: [
              [{
                text: "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
                callback_data: "news_notification_false"
              }],
              [{
                text: query.message.reply_markup.inline_keyboard[1][0].text,
                callback_data: query.message.reply_markup.inline_keyboard[1][0]
                  .callback_data
              }]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    case "pharmacy_notification_true":
      // set to true
      userRef
        .update({
          pharmacy_notification: true
        })
        .then(() => {
          console.log("Pharmacy notification option updated to true");
          inline_keyboard_markup = {
            inline_keyboard: [
              [{
                text: query.message.reply_markup.inline_keyboard[0][0].text,
                callback_data: query.message.reply_markup.inline_keyboard[0][0]
                  .callback_data
              }],
              [{
                text: "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
                callback_data: "pharmacy_notification_false"
              }]
            ]
          };
          bot.editMessageReplyMarkup(inline_keyboard_markup, {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: inline_keyboard_markup
          });
        })
        .catch(error => {
          console.error(error);
        });
      break;
    default:
      const {
        symptom, answer
      } = JSON.parse(query.data);
      // parse data into firebase
      switch (symptom) {
        case kb.symptoms.fever:
          userRef.set({
            corona_test: {
              fever: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.cough, keyboards.q2A);
          break;
        case kb.symptoms.cough:
          userRef.set({
            corona_test: {
              cough: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.weakness, keyboards.q3A);
          break;
        case kb.symptoms.weakness:
          userRef.set({
            corona_test: {
              weakness: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.shortness_of_breath, keyboards.q4A);
          break;
        case kb.symptoms.shortness_of_breath:
          userRef.set({
            corona_test: {
              shortness_of_breath: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.headache, keyboards.q5A);
          break;
        case kb.symptoms.headache:
          userRef.set({
            corona_test: {
              headache: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.body_aches, keyboards.q6A);
          break;
        case kb.symptoms.body_aches:
          userRef.set({
            corona_test: {
              body_aches: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.sore_throat, keyboards.q7A);
          break;
        case kb.symptoms.sore_throat:
          userRef.set({
            corona_test: {
              sore_throat: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.chills, keyboards.q8A);
          break;
        case kb.symptoms.chills:
          userRef.set({
            corona_test: {
              chills: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.runny_nose, keyboards.q9A);
          break;
        case kb.symptoms.runny_nose:
          userRef.set({
            corona_test: {
              runny_nose: answer
            }
          }, {
            merge: true
          });
          sendQuestion(chatId, kb.symptoms.sneezing, keyboards.q10A);
          break;
        case kb.symptoms.sneezing:
          userRef.set({
            corona_test: {
              sneezing: answer
            }
          }, {
            merge: true
          });

          let covid_score = 0;
          let cold_score = 0;
          let flu_score = 0;

          console.log(userId);
          userRef = db.collection("user_info").doc(String(userId));
          userRef.get().then(snapshot => {
            let test_results = snapshot.data().corona_test;
            for (let key in test_results) {
              if (covid_symptoms[key] == test_results[key]) {
                covid_score++;
              }
              if (cold_symptoms[key] == test_results[key]) {
                cold_score++;
              }
              if (flu_symptoms[key] == test_results[key]) {
                flu_score++;
              }
            }

            bot.sendMessage(
              chatId,
              `–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n–ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å: ${(covid_score *
                100) /
                symptoms_number}%\n–ü—Ä–æ—Å—Ç—É–¥–∞: ${(cold_score * 100) /
                symptoms_number}%\n–ì—Ä–∏–ø–ø: ${(flu_score * 100) /
                symptoms_number}%\n–í–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –º—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–∫–æ—Ä—É—é –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å!`
            );
          });

          // end
          break;
        default:
          break;
      }
      break;
  }
});

async function updateNotification(user_id) {
  userRef = db.collection("user_info");
  let news_notification, pharmacy_notification;
  docSnapshot = await userRef.doc(String(user_id)).get();

  if (docSnapshot.exists) {
    news_notification = docSnapshot.data().news_notification;
    pharmacy_notification = docSnapshot.data().pharmacy_notification;
  }

  return {
    news_notification,
    pharmacy_notification
  };
}

function sendQuestion(chatId, symptom, question) {
  bot.sendMessage(chatId, `–£ –≤–∞—Å –µ—Å—Ç—å ${symptom}?`, {
    reply_markup: {
      inline_keyboard: question
    }
  });
}