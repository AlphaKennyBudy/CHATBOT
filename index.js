require("dotenv").config();
let db = require("./database.js");
const TelegramBot = require("node-telegram-bot-api");
const debug = require("./helpers");

const TOKEN = process.env.TOKEN;

const bot = new TelegramBot(TOKEN, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 10
    }
  }
});

console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");

bot.on("message", msg => {
  const chatId = msg.chat.id;

  const close_txt = "–ó–∞–∫—Ä—ã—Ç—å ‚ùå";
  const option_txt = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è";
  const validation_txt = "–Ø –º–æ–≥—É –±—ã—Ç—å –∑–∞—Ä–∞–∂–µ–Ω?ü§ß\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è";

  const user_id = msg.from.id;
  const chat_id = msg.chat.id;
  let { first_name, username } = msg.from;
  const date = msg.date;
  let userRef = db.collection("user_info").doc(String(user_id));
  let news_notification = true;
  let pharmacy_notification = true;

  switch (msg.text) {
    case "/start":
      bot.sendMessage(
        chatId,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞–≤–∞—Ç—å –≤—Å—é –∞–∫—Ç—É–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ COVID-19\n–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã.",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
                  callback_data: "news_notification_false"
                }
              ],
              [
                {
                  text: "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
                  callback_data: "pharmacy_notification_false"
                }
              ]
            ]
          }
        }
      );

      if (username === undefined) {
        username = null;
      }

      bot.sendMessage(chatId, debug(msg));

      userRef
        .get()
        .then(snapshot => {
          if (!snapshot.exists) {
            userRef
              .set({
                user_id: user_id,
                chat_id: chat_id,
                first_name: first_name,
                username: username,
                date: new Date(date),
                news_notification: true,
                pharmacy_notification: true
              })
              .then(() => {
                console.log("User successfully added!");
              });
          } else {
            console.log("Already in database");
          }
        })
        .catch(err => {
          console.error(err);
        });
      break;
    case close_txt:
      bot.sendMessage(chatId, "–ó–∞–∫—Ä—ã—Ç–æ", {
        reply_markup: {
          remove_keyboard: true
        }
      });
      break;
    case "/test":
    case validation_txt:
      break;
    case "/options":
    case option_txt:
      // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É —Å –¥–± –æ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö
      // –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
      userRef.get().then(snapshot => {
        if (snapshot.exists) {
          news_notification = snapshot.data().news_notification;
          pharmacy_notification = snapshot.data().pharmacy_notification;
        }
      });
      let news_notification_option = [];
      let pharmacy_notification_option = [];
      if (news_notification) {
        news_notification_option = [
          {
            text: "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
            callback_data: "news_notification_false"
          }
        ];
      } else {
        news_notification_option = [
          {
            text: "–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
            callback_data: "news_notification_true"
          }
        ];
      }

      if (pharmacy_notification) {
        pharmacy_notification_option = [
          {
            text: "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
            callback_data: "pharmacy_notification_false"
          }
        ];
      } else {
        pharmacy_notification_option = [
          {
            text: "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è n–æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö",
            callback_data: "pharmacy_notification_true"
          }
        ];
      }
      break;
    case "/menu":
    default:
      bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
        reply_markup: {
          keyboard: [[validation_txt], [option_txt], [close_txt]],
          one_time_keyboard: true
        }
      });
  }
});

bot.on("callback_query", query => {
  const userId = query.from.id;
  const chatId = query.message.chat.id;

  userRef = db.collection("user_info").doc(String(userId));

  switch (query.data) {
    case "news_notification_false":
      // set to false
      userRef
        .update({
          news_notification: false
        })
        .then(() => {
          console.log("News notification option updated to false");
        })
        .catch(error => {
          console.error(error);
        });

      bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã");
      break;
    case "pharmacy_notification_false":
      // set to false
      userRef
        .update({
          pharmacy_notification: false
        })
        .then(() => {
          console.log("Pharmacy notification option updated to false");
        })
        .catch(error => {
          console.error(error);
        });

      bot.sendMessage(
        chatId,
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã"
      );
      break;
    case "news_notification_true":
      // set to true
      userRef
        .update({
          news_notification: true
        })
        .then(() => {
          console.log("News notification option updated to true");
        })
        .catch(error => {
          console.error(error);
        });

      bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –≤–∫–ª—é—á–µ–Ω—ã");
      break;
    case "pharmacy_notification_true":
      // set to true
      userRef
        .update({
          pharmacy_notification: true
        })
        .then(() => {
          console.log("Pharmacy notification option updated to true");
        })
        .catch(error => {
          console.error(error);
        });

      bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã");
      break;
    default:
      console.error("???");
      break;
  }
});
